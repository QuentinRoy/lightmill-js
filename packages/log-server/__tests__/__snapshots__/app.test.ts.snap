// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`logs > get /experiments/:experiment/logs > should be able to filter logs by type using the type query parameter 1`] = `
[
  [
    {
      "experimentName": "exp",
      "runStatus": [
        "-canceled",
      ],
      "type": "log-type",
    },
  ],
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as csv if csv is the first supported format in the Accept header 1`] = `
[
  [
    {
      "experimentName": "exp",
      "runStatus": "-canceled",
    },
  ],
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as csv if csv is the first supported format in the Accept header 2`] = `
"type,run_name,run_status,mock_col1,mock_col2,mock_col3
getLogs:type-1,getLogs:runName-1,running,log1-mock-value1,log1-mock-value2,
getLogs:type-2,getLogs:runName-2,completed,log2-mock-value1,log2-mock-value2,log2-mock-value3
"
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json by default 1`] = `
[
  [
    {
      "experimentName": "exp",
      "runStatus": [
        "-canceled",
      ],
    },
  ],
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json by default 2`] = `
[
  {
    "experimentName": "getLogs:experimentName-1",
    "runName": "getLogs:runName-1",
    "runStatus": "running",
    "type": "getLogs:type-1",
    "values": {
      "mock-col1": "log1-mock-value1",
      "mock-col2": "log1-mock-value2",
    },
  },
  {
    "experimentName": "getLogs:experimentName-2",
    "runName": "getLogs:runName-2",
    "runStatus": "completed",
    "type": "getLogs:type-2",
    "values": {
      "mock-col1": "log2-mock-value1",
      "mock-col2": "log2-mock-value2",
      "mock-col3": "log2-mock-value3",
    },
  },
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json if json is the first supported format in the Accept header 1`] = `
[
  [
    {
      "experimentName": "exp",
      "runStatus": [
        "-canceled",
      ],
    },
  ],
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json if json is the first supported format in the Accept header 2`] = `
[
  {
    "experimentName": "getLogs:experimentName-1",
    "runName": "getLogs:runName-1",
    "runStatus": "running",
    "type": "getLogs:type-1",
    "values": {
      "mock-col1": "log1-mock-value1",
      "mock-col2": "log1-mock-value2",
    },
  },
  {
    "experimentName": "getLogs:experimentName-2",
    "runName": "getLogs:runName-2",
    "runStatus": "completed",
    "type": "getLogs:type-2",
    "values": {
      "mock-col1": "log2-mock-value1",
      "mock-col2": "log2-mock-value2",
      "mock-col3": "log2-mock-value3",
    },
  },
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json if the Accept header is not supported 1`] = `
[
  [
    {
      "experimentName": "exp",
      "runStatus": [
        "-canceled",
      ],
    },
  ],
]
`;

exports[`logs > get /experiments/:experiment/logs > should return logs as json if the Accept header is not supported 2`] = `
[
  {
    "experimentName": "getLogs:experimentName-1",
    "runName": "getLogs:runName-1",
    "runStatus": "running",
    "type": "getLogs:type-1",
    "values": {
      "mock-col1": "log1-mock-value1",
      "mock-col2": "log1-mock-value2",
    },
  },
  {
    "experimentName": "getLogs:experimentName-2",
    "runName": "getLogs:runName-2",
    "runStatus": "completed",
    "type": "getLogs:type-2",
    "values": {
      "mock-col1": "log2-mock-value1",
      "mock-col2": "log2-mock-value2",
      "mock-col3": "log2-mock-value3",
    },
  },
]
`;
