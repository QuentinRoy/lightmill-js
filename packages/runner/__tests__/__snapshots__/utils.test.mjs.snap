// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`asyncForEach with async iterator rejects if a sync callback throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
    ],
    [
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "throw",
      "value": [Error: mock-callback-error],
    },
  ],
}
`;

exports[`asyncForEach with async iterator rejects if an async callback throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
    ],
    [
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`asyncForEach with async iterator rejects if the iterator throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`asyncForEach with sync iterator rejects if a sync callback throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
    ],
    [
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "throw",
      "value": [Error: mock-callback-error],
    },
  ],
}
`;

exports[`asyncForEach with sync iterator rejects if an async callback throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
    ],
    [
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`asyncForEach with sync iterator rejects if the iterator throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "a",
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`asyncReduce with async iterator rejects if a sync reducers throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
    [
      "test:a,b,",
      "c",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": "test:a,",
    },
    {
      "type": "return",
      "value": "test:a,b,",
    },
    {
      "type": "throw",
      "value": [Error: mock-reducer-error],
    },
  ],
}
`;

exports[`asyncReduce with async iterator rejects if an async reducers throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
    [
      "test:a,b,",
      "c",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`asyncReduce with async iterator rejects if the iterator throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": "test:a,",
    },
    {
      "type": "return",
      "value": "test:a,b,",
    },
  ],
}
`;

exports[`asyncReduce with sync iterator rejects if a sync reducers throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
    [
      "test:a,b,",
      "c",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": "test:a,",
    },
    {
      "type": "return",
      "value": "test:a,b,",
    },
    {
      "type": "throw",
      "value": [Error: mock-reducer-error],
    },
  ],
}
`;

exports[`asyncReduce with sync iterator rejects if an async reducers throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
    [
      "test:a,b,",
      "c",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`asyncReduce with sync iterator rejects if the iterator throws 1`] = `
[MockFunction] {
  "calls": [
    [
      "test:",
      "a",
    ],
    [
      "test:a,",
      "b",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": "test:a,",
    },
    {
      "type": "return",
      "value": "test:a,b,",
    },
  ],
}
`;
