// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runExperiment calls \`app.crash\` then throws if runTrials goes wrong 1`] = `
[MockFunction spyGroup#all] {
  "calls": Array [
    Array [
      "connection.getRun",
      Array [],
    ],
    Array [
      "connection.getRun resolution",
      Object {
        "id": "runId",
      },
    ],
    Array [
      "storage.set",
      Array [
        "runId",
      ],
    ],
    Array [
      "runTrials",
      Array [
        Object {
          "disconnect": [MockFunction],
          "getRun": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
          "mockName": "connection",
        },
        Object {
          "mockName": "app",
          "runTrial": [MockFunction],
        },
        1,
      ],
    ],
    Array [
      "runTrials rejection",
      [Error: runTrials error],
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`runExperiment runs as expected if every app handlers are provided 1`] = `
[MockFunction spyGroup#all] {
  "calls": Array [
    Array [
      "app.start",
      Array [],
    ],
    Array [
      "connection.getRun",
      Array [],
    ],
    Array [
      "app.start resolution",
      undefined,
    ],
    Array [
      "connection.getRun resolution",
      Object {
        "id": "runId",
      },
    ],
    Array [
      "storage.set",
      Array [
        "runId",
      ],
    ],
    Array [
      "runTrials",
      Array [
        Object {
          "disconnect": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
          "getRun": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
          "mockName": "connection",
        },
        Object {
          "end": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": null,
              },
            ],
          },
          "initBlock": [MockFunction],
          "mockName": "app",
          "runTrial": [MockFunction],
          "start": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
        },
        1,
      ],
    ],
    Array [
      "runTrials resolution",
      undefined,
    ],
    Array [
      "storage.remove",
      Array [],
    ],
    Array [
      "connection.disconnect",
      Array [],
    ],
    Array [
      "connection.disconnect resolution",
      undefined,
    ],
    Array [
      "app.end",
      Array [],
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`runExperiment works properly even if only \`app.runTrial\` is provided 1`] = `
[MockFunction spyGroup#all] {
  "calls": Array [
    Array [
      "connection.getRun",
      Array [],
    ],
    Array [
      "connection.getRun resolution",
      Object {
        "id": "runId",
      },
    ],
    Array [
      "storage.set",
      Array [
        "runId",
      ],
    ],
    Array [
      "runTrials",
      Array [
        Object {
          "disconnect": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
          "getRun": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Promise {},
              },
            ],
          },
          "mockName": "connection",
        },
        Object {
          "mockName": "app",
          "runTrial": [MockFunction],
        },
        1,
      ],
    ],
    Array [
      "runTrials resolution",
      undefined,
    ],
    Array [
      "storage.remove",
      Array [],
    ],
    Array [
      "connection.disconnect",
      Array [],
    ],
    Array [
      "connection.disconnect resolution",
      undefined,
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;
